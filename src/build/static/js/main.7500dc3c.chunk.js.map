{"version":3,"sources":["components.js","index.js"],"names":["PlaylistCard","imageURL","name","description","id","className","style","backgroundImage","onClick","getNewTokenThen","addPlaylistToLibrary","callback","fetch","then","response","status","json","data","access_token","console","log","catch","e","spotifyAccessToken","playlist_id","method","headers","alert","playlistsData","items","Playlists","map","playlist","images","url","ReactDOM","render","document","getElementById"],"mappings":"wPAGaA,EAAe,SAAUC,EAAUC,EAAMC,EAAaC,GAC/D,OACI,sBAAcC,UAAW,qBAAzB,UACI,qBAAKA,UAAW,wBAAyBC,MAAO,CAAEC,gBAAgB,OAAD,OAASN,EAAT,QACjE,mBAAGI,UAAW,gBAAd,SAAgCH,IAChC,mBAAGG,UAAW,uBAAd,SAAuCF,IACvC,wBAAQK,QAAU,WAAWC,EAAgBC,EAAsBN,IAAOC,UAAW,gBAArF,qBAJMD,ICsDLK,EAAkB,SAAUE,EAAUP,GAIjDQ,MAAM,mCAAoC,IAAIC,MAC5C,SAACC,GACC,GAAwB,MAApBA,EAASC,OAEX,OADWD,EAASE,UAKxBH,MAAK,SAACI,GACN,IAAIC,EAAeD,EAAI,aAEvB,OADAE,QAAQC,IAAIF,GACLA,KACNL,MAAK,SAACK,GACPP,EAASO,EAAcd,MACtBiB,OACD,SAACC,GACCH,QAAQC,IAAIE,OAMLZ,EAAuB,SAASa,EAAoBC,GAC/DZ,MAAM,wCAAD,OAAyCY,EAAzC,cAAkE,CACrEC,OAAQ,MACRC,QAAU,CACR,cAAgB,UAAhB,OAA2BH,MAE5BV,MAAK,SAACC,GACgB,KAAnBA,EAASC,QACXI,QAAQC,IAAI,WACZO,MAAM,mCAENR,QAAQC,IAAI,0BACZO,MAAM,mGAEPN,OAAM,SAACC,GACRH,QAAQC,IAAI,wBACZD,QAAQC,IAAIE,OAIhBb,GAhGuB,SAAUc,EAAoBnB,GAEnDQ,MAAM,oCAAD,OAJQ,4BAIR,cAAyD,CAC5Da,OAAQ,MACRC,QAAS,CACP,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,sBAIjBV,MAAK,SAACC,GACP,GAAwB,MAApBA,EAASC,OAEX,OADAI,QAAQC,IAAI,QACLN,EAASE,OACa,MAApBF,EAASC,SAClBQ,EAAqBd,IAErBU,QAAQC,IAAI,WAEbP,MACD,SAACI,GACC,IAAIW,EAAgBX,EAAKY,MACzBV,QAAQC,IAAIQ,GAEZ,IAAME,EAAY,WAChB,OACE,qBAAK1B,GAAI,iBAAT,SACIwB,EAAcG,KAAI,SAAAC,GAAQ,OAC1B,8BACGhC,EAAagC,EAASC,OAAO,GAAGC,IAAKF,EAAS9B,KAAM8B,EAAS7B,YAAa6B,EAAS5B,YAQ9F+B,IAASC,OACP,cAACN,EAAD,IACAO,SAASC,eAAe,YAM5BjB,OAAM,SAACC,GACPH,QAAQC,IAAIE,U","file":"static/js/main.7500dc3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { addPlaylistToLibrary, getNewTokenThen } from './index.js';\r\n\r\nexport const PlaylistCard = function (imageURL, name, description, id) {\r\n    return (\r\n        <div key={id} className={\"playlist-container\"}>\r\n            <div className={\"cover-image-container\"} style={{ backgroundImage: `url(${imageURL})` }}></div>\r\n            <p className={\"playlist-name\"}>{name}</p>\r\n            <p className={\"playlist-description\"}>{description}</p>\r\n            <button onClick={ function(){getNewTokenThen(addPlaylistToLibrary, id)} } className={\"follow-button\"}>Add +</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { PlaylistCard } from './components'\n\n//do not forget to adjust the api domains\n\nconst userID = \"nk0b80ekcsiwcpht16mym9gzr\"\n\nconst fetchPlaylists = function (spotifyAccessToken, id) {\n  //fetching the list of playlists from spotify but only after receiving the access token\n  fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n    method: \"GET\",\n    headers: {\n      'Authorization': `Bearer ${spotifyAccessToken}`,\n      'Content-Type': 'application/json'\n\n\n    }\n  }).then((response) => {\n    if (response.status === 200) {\n      console.log(\"good\")\n      return response.json()\n    } else if (response.status === 401) {\n      spotifyAccessToken = getNewTokenThen()\n\n      console.log(\"bad\")\n    }\n  }).then(\n    (data) => {\n      let playlistsData = data.items\n      console.log(playlistsData)\n\n      const Playlists = function () {\n        return (\n          <div id= \"playlists-grid\">\n            { playlistsData.map(playlist=>(\n              <div>\n                {PlaylistCard(playlist.images[0].url, playlist.name, playlist.description, playlist.id)}\n              </div>\n            )  ) }\n          </div>\n        )\n        \n      }\n\n      ReactDOM.render(\n        <Playlists></Playlists>,\n        document.getElementById('root')\n      );\n\n\n    }\n\n  ).catch((e) => {\n    console.log(e)\n  })\n}\n\nexport const getNewTokenThen = function (callback, id) {\n  //getting new token then passing it to a callback, so that fetchPlaylists can access the token\n\n  \n  fetch('http://127.0.0.1:8000/spotifyapi', {}).then(\n    (response) => {\n      if (response.status === 200) {\n        let data = response.json()\n        return data\n      }\n\n    }\n  ).then((data) => {\n    let access_token = data[\"access_token\"]\n    console.log(access_token)\n    return access_token\n  }).then((access_token) => {\n    callback(access_token, id)\n  }).catch(\n    (e) => {\n      console.log(e)\n\n    }\n  )\n}\n\nexport const addPlaylistToLibrary = function(spotifyAccessToken, playlist_id){\n  fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/followers`, {\n    method: 'PUT',\n    headers : {\n      'Authorization': `Bearer ${spotifyAccessToken}`\n    }\n  }).then((response)=>{\n    if (response.status == 200){\n      console.log(\"Success\")\n      alert('Added to library!ðŸ˜Ž')\n    } else {\n      console.log(\"Could not add playlist\")\n      alert('Oops, Maybe you already follow this playlist? ðŸ™Š \\n Try searching for it instead.')\n    }\n  }).catch((e)=>{\n    console.log(\"Some shit went wrong\")\n    console.log(e)\n  })\n}\n\ngetNewTokenThen(fetchPlaylists)\n\n\n"],"sourceRoot":""}